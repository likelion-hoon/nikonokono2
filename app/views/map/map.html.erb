<!DOCTYPE html>
<html lang="ko">
    <head>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
        <title> 노래방 위치 찾기 </title>

        <!-- tmap api 등록 -->
        <script src="https://api2.sktelecom.com/tmap/js?version=1&format=javascript&appKey=6a71ac68-585d-4a6e-8f1d-3a6182dee409"></script>

        <script type="text/javascript">
          // 전역 변수 설정
          var map, marker, markerLayer;
          var currentLon, currentLat;

          $(document).ready(function(){
              initTmap();
          });

          // 맵 초기화 함수
          function initTmap() {

              map = new Tmap.Map({
                  div:'map_div',
                  width:'100%',
                  height:'771px'
              });

              /* map.addControls 위치 바뀌면 안됨 */
              // Tmap.Control를 사용하여 지도를 키보드로 컨트롤 할 수 있게 만든다.
              map.addControls([
                  new Tmap.Control.KeyboardDefaults()
              ]);

              // Tmap.Control를 사용하여 마우스 커서의 현재 위치를 표시해 준다.
              map.addControls([
                  new Tmap.Control.MousePosition({displayProjection:"EPSG:4326"})
              ]);

              // 미니 맵 보여주는 컨트롤 추가
              map.addControls([
                  new Tmap.Control.OverviewMap()
              ]);

              if(navigator.geolocation) {
                  // 현재 위치를 얻어오는 함수
                  navigator.geolocation.getCurrentPosition(function(position) {

                      currentLat = position.coords.latitude; // 위도
                      currentLon = position.coords.longitude; // 경도

                      var PR_3857 = new Tmap.Projection("EPSG:3857");  // Google Mercator 좌표계인 EPSG:3857
                      var PR_4326 = new Tmap.Projection("EPSG:4326");  // WGS84 GEO 좌표계인 EPSG:4326
                      var size = new Tmap.Size(24, 38);
                      var offset = new Tmap.Pixel(-(size.w / 2), -(size.h));

                      // 현재 위치 표시하는 아이콘
                      var icon = new Tmap.Icon('http://tmapapis.sktelecom.com/upload/tmap/marker/pin_b_m_a.png',size, offset);

                      markerLayer = new Tmap.Layer.Markers("marker"); // 매개변수에 상관없이 작동
                      map.addLayer(markerLayer);

                      /* 현재위치 마커 등록 */
                      // Tmap.Marker의 Lon, Lat은 EPSG:3857을 사용한다.
                      marker = new Tmap.Marker(new Tmap.LonLat(currentLon, currentLat).transform("EPSG:4326", "EPSG:3857"), icon);
                      markerLayer.addMarker(marker);

                      // 지도 중앙 위치 생성
                      map.setCenter(new Tmap.LonLat(currentLon, currentLat).transform("EPSG:4326", "EPSG:3857"), 15);
                      searchPOI(); // POI 통합검색 함수 실행합니다.
                  });

              } // if 함수의 끝
          } // initTmap()의 마지막

          function addMarkerLayer() {
              markerLayer = new Tmap.Layer.Markers("marker"); // 매개변수에 상관없이 작동
              map.addLayer(markerLayer);
          }

          //마커의 옵션을 설정해주는 함수입니다.
          function addMarker(options){
              var size = new Tmap.Size(12,19);//마커 아이콘 사이즈 입니다.
              var offset = new Tmap.Pixel(-(size.w/2), -size.h);//마커 아이콘의 중심점 입니다.
              var icon = new Tmap.Icon("http://tmapapis.sktelecom.com/upload/tmap/marker/pin_r_s_simple.png",size,offset);//마커 아이콘의 이미지, 크기, 중심점 설정입니다.
              var marker = new Tmap.Markers(options.lonlat,icon,options.label);//위에서 설정한 값을 통해 마커를 생성합니다.
              markerLayer.addMarker(marker); //마커레이어에 마커를 추가합니다.
              marker.events.register("mouseover", marker, onOverMouse); //mouseover 이벤트, 마커에 마우스 커서를 올리면 실행하는 이벤트를 등록합니다.
              marker.events.register("mouseout", marker, onOutMouse); //mouseout 이벤트, 마우스 커서가 마커에서 벗어나면 실행하는 이벤트를 등록합니다.
              marker.events.register("click", marker, onClickMouse); //click 이벤트, 마커를 클릭하면 실행하는 이벤트를 등록합니다.
          }

          //mouseover 이벤트 함수
          function onOverMouse(e){
              this.popup.show();//팝업을 보여준다.
          }

          //mouseout 이벤트 함수
          function onOutMouse(e){
              this.popup.hide();//팝업을 숨긴다.
          }

          //click 이벤트 함수
          function onClickMouse(e){
              console.log(this.lonlat); //마커를 클릭했을때의 마커의 좌표정보를 콘솔창에서 확인할 수 있습니다.
              getDataFromLonLat(this.lonlat);//클릭한 좌표를 통해 data를 받아오는 함수입니다.
          }

          //통합 POI 검색 함수
          function searchPOI(){
              tdata = new Tmap.TData();//REST API 에서 제공되는 경로, 교통정보, POI 데이터를 쉽게 처리할 수 있는 클래스입니다.
              tdata.events.register("onComplete", tdata, onCompleteTData); // 데이터 로드가 성공적으로 완료되었을 때 발생하는 이벤트
              var center = map.getCenter(); // map의 중심 좌표를 받아옵니다. ( EPSG:3857로 받아옴 )
              // var cur = new Tmap.LonLat(center.lon, center.lat).transform("EPSG:3857", "EPSG:4326");

              // POI 검색 데이터를 콜백 함수를 통해 XML로 리턴합니다.
              tdata.getPOIDataFromSearch(encodeURIComponent("노래방"), {page:1, count:30, radius:"1", centerLon:center.lon, centerLat:center.lat, reqCoordType:"EPSG3857", resCoordType:"EPSG3857", searchtypCd:'R'});
          }

          //데이터 로드가 성공적으로 완료되었을 때 발생하는 이벤트 함수
          function onCompleteTData(e){
              if($(this.responseXML).find("searchPoiInfo pois poi").text() != ''){
                  $(this.responseXML).find("searchPoiInfo pois poi").each(function(){ //결과를 each문으로 돌려 마커를 등록합니다.
                      //response 데이터중 원하는 값을 find 함수로 찾습니다.
                      var name = $(this).find("name").text();
                      var id = $(this).find("id").text();
                      var lon = $(this).find("frontLon").text();
                      var lat = $(this).find("frontLat").text();
                      var options = {
                          label:new Tmap.Label(name),//마커 라벨 text 설정
                          lonlat:new Tmap.LonLat(lon, lat)//마커 라벨 좌표 설정
                      };
                      addMarker(options);//마커를 추가하는 함수입니다.
                  });
              } else {
                  alert('검색결과가 없습니다.');
              }

              map.zoomToExtent(markerLayer.getDataExtent()); //마커 레이어의 최대 익스텐트를 계산해 이에 맞게 지도를 줌합니다.
              tdata.events.unregister("onComplete", tdata, onCompleteTData); //onCompleteTData 이벤트 등록 해제
          }

          function getDataFromLonLat(lonlat){ //클릭된 마커의 좌표를 가져옵니다.
              tdata = new Tmap.TData();//REST API 에서 제공되는 경로, 교통정보, POI 데이터를 쉽게 처리할 수 있는 클래스입니다.
              tdata.events.register("onComplete", tdata, onCompleteTDataLonLat); //데이터 로드가 성공적으로 완료되었을 때 발생하는 이벤트
              tdata.getPOIDataFromLonLat(lonlat, encodeURIComponent("편의점"), {radius:1});//POI 검색 데이터를 콜백 함수를 통해 XML로 리턴합니다.
          }

          // 마커를 클릭했을때 반경 300미터 이내의 편의점과 편의점의 좌표를 나타내줄 함수입니다.
          function onCompleteTDataLonLat(e){
              markerLayer.clearMarkers(); //마커 전체 삭제합니다.
              if($(this.responseXML).find("searchPoiInfo pois poi").text() != ''){
                  $(this.responseXML).find("searchPoiInfo pois poi").each(function(){//결과를 each문으로 돌려 마커를 등록합니다.
                      var name = $(this).find("name").text();//결과에서 name을 찾습니다.
                      var lon = $(this).find("frontLon").text();//결과에서 lon을 찾습니다.
                      var lat = $(this).find("frontLat").text();//결과에서 lat를 찾습니다.
                      var options = {
                          label:new Tmap.Label(name),//마커 라벨 text 설정
                          lonlat:new Tmap.LonLat(lon, lat)//마커 라벨 좌표 설정
                      };
                      addMarker(options);//마커를 추가하는 함수입니다.
                  });
              }else {
                  alert('검색결과가 없습니다.');
              }
              map.zoomToExtent(markerLayer.getDataExtent()); //마커 레이어의 최대 익스텐트를 계산해 이에 맞게 지도를 줌합니다.
              tdata.events.unregister("onComplete", tdata, onCompleteTDataLonLat); //onCompleteTDataLonLat 이벤트 등록 해제
          }


          // 현재 위치로 이동하는 함수
          function toCurrentLocation() {
              //좌표 설정
              var lonlat = new Tmap.LonLat(currentLon, currentLat).transform("EPSG:4326", "EPSG:3857");
              map.panTo(lonlat);
          }

          // 지도의 줌레벨을 한단계 올리는 함수
          function zoomIn() {
              map.zoomIn();
              showZoomLevel();
          }

          // 지도의 줌레벨을 한단계 내리는 함수
          function zoomOut() {
              map.zoomOut();
              showZoomLevel();
          }

          // 현재 줌의 레벨을 보여주는 함수
          function showZoomLevel() {
              var res = '현재 지도의 레벨은 ' + map.getZoom() + ' 입니다.';
              var result = document.getElementById("result");
              result.innerHTML = res;
          }

          // 줌 버튼 추가
          function addZoomButton() {
              map.addZoomControl();
          }

          // 줌 버튼 삭제
          function removeZoomButton() {
              map.removeZoomControl();
          }

        </script>
    </head>
    <body>
      <div id="wrap">
        <aside>
            <div class="map_form">
              <form id="find" action="#" method="POST">
                  <div class="startLoc">
                    <input type="text" class="form-control input-sm" id="fromLoc" name="fromLoc" placeholder="출발 위치"/>
                    <a href="#" class="btn btn-sm btn-primary" id="setCurLoc"> 현재위치 </a>
                  </div>

                  <div class="endLoc">
                    <input type="text" class="form-control input-sm" id="toLoc" name="toLoc" placeholder="도착 위치" />
                    <button type="submit" id="findRoad" class="btn btn-sm btn-primary">길 찾기 </button>
                  </div>
              </form>
            </div>

            <hr>

            <div class="map_info">


            </div>

            <hr>

            <div class="button_list">
                 <a onClick="toCurrentLocation()" class="btn btn-sm btn-warning"> 현재 위치로 이동 </a>
                 <a onClick="zoomIn()" class="btn btn-sm btn-warning">확대</a>
                 <a onClick="zoomOut()" class="btn btn-sm btn-warning">축소</a>
                 <a onClick="removeZoomButton()" class="btn btn-sm btn-warning">맵에 줌버튼을 제거</a>
                 <a onClick="addZoomButton()" class="btn btn-sm btn-warning">맵에 primary 추가</a>
            </div>
          </div>
        </aside>

        <section>
          <div id="map_div">
          </div>
        </section>
      </div>
    </body>
</html>
